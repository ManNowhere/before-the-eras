* - уровень сложности задачи (объективно).

=================================================================================
1.* Пользователь вводит любое предложение (несколько). После этого вводит слово
(словосочетание). Программа должна определить, есть ли такое слово (словосочетание)
в введеном/введеных предложении/предложениях.

Заметка: это может быть не вся программа, а простая функция.

Дополнительно: Так же определить кол-во повторений.


=================================================================================


2.** Пользователь вводит поочередно слова (кол-во ограничено разработчиком).
После этого пользователь указывает целочисленное число. Это число означает кол-во
случайных слов из ранее введеных. Программа должна сконкатенировать это кол-во
слов в одну строку.

Заметка: Если пользователь ввел число. значение которого превышает кол-во строк,
программа должна предупредить об этом и предложить ввести число еще раз.
В этой задаче используется генератор случайных чисел.


==================================================================================

3.*** Важно! В этой задаче возможно несколько архитектурных решений.

Написать функцию, входным параметром которой является строка. Возвращаемое значение bool.
Строка может содержать скобки открывающиеся '(' и закрывающиеся ')'. Функция должна определить
соответствие кол-ва открывающихся скобок и закрывающихся.

Дополнительно (сложнее): Строка может не содержать скобок. В таком случае возможно несколько архитектурных
решений. Например, функция может возвращать не bool, а enum (целочисленное перечисление констант),
который будет являться кодом результата выполнения функции, каждый из которых, возвращается 
при определенных условиях.




========================================1==================================================


#include <iostream>
#include <string>
using namespace std;

void check (char* Arr1, char* Arr2, int & i, int z, int&p);//сравнение двух массивов
void Count(char* Arr1, int&, int n);//находим ближайший пробел после несовпадения
int main()
{

    const int num = 100;//предложение
    const int k = 10;//искомое слово
    char Arr[num];
    char arr[k];
    cout << "Enter sentence: ";
    cin.getline(Arr, num);//ввод предложения
    cout << "Enter word: ";
    cin.getline(arr, k);//ввод искомого слова
    int count = 0;
    int N = 0;//
    int n = 0;
    int P = 0;//количнство совпадений

    while (arr[n])//реальная длинна проверочного слова
    {
        ++n;
    }

    while (Arr[N])//реальная длинна предложения
    {
        ++N;
    }



    while(count < N)
    {
       check(Arr, arr, count, n, P);

       Count(Arr, count, N);
       ++count;

    }
    cout << P;

    return 0;
}


void check (char* Arr1, char* Arr2, int & i, int z, int& p)
{
    int t = 0;

    while (Arr2[t] == Arr1[i])
    {
           if(t == z-1)
           {
               //cout << " Eto nujnoe slovo\n";
               ++p;
           }
       ++t;
       ++i;
    }
}


void Count (char* Arr1, int& Count, int n)
{
    while(Arr1[Count] != ' ' && Count < n)
 {
    ++Count;
 }
}


=========================================2===============================================


#include <iostream>
#include <cstring>
#include <ctime>
#include <cstdlib>
using namespace std;


int main()
{
    srand( time( 0 ) );

    const int count = 5;//количестыво слов
    int num  = 15;//длинна слова
    char** words = new char*[count];//массив слов
    int E = 0;//количество слов для конкатенации
    char* slovo = new char[100];

    cout << "enter words: " << endl;

    for (int i = 0; i < count; ++i)//создание массива слов
    {
        words[i] = new char[num];
        cin.getline(words[i], num);
    }
    for (int i = 0; i < 100; ++i)//обнуление элементов массива
    {
        slovo[i] = 0;
    }

    cout << "enter numbet 1 to " << count << endl;

       cin >> E;
    while(E > count)//отсечение неверного ввода
    {
        cout << "Invalid number, try again: ";
        cin >> E;
    }

    for (int j = 0; j < E; ++j)//конкатенация слов
    {
        int k = rand() % E;
        cout << k << endl;
        strcat(slovo, words[k]);
        cout << slovo << endl;
    }
cout << "slovo = " << slovo << endl;

    return 0;
}









======================================3====================================================




#include <iostream>
#include <cstring>
using namespace std;

bool Count(char* String);


int main()
{
    const int num = 100;
    char Str[num];
    cout << "enter string: " << endl;
    cin.getline(Str, num);

    if(Count(Str))
    {
        cout << "the quantity matches";
    }
    else
    {
        cout << "quantity does not match";
    }





    return 0;
}


 bool Count(char *String)
 {
     int a = 0;
     int b = 0;
     bool c = true;
     int i = 0;
     int I = 0;

     while(String[I])
     {
         ++I;
     }


     while (i <= I)
     {
         if(String[i] == '(')
         {
             ++a;
         }
         else if (String[i] == ')')
         {
             ++b;
         }
         ++i;
     }


     if((a+b) > 0 && (a != b))//одна из скобок точно есть
     {
         c = false;
     }
     else if((a+b) > 0 && (a == b))//обе скобки есть и их равное количество
     {
         c = true;
     }
     return c;
 }
